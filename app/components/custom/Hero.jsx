"use client"
import { MessageContext } from '../../context/MessageContext'
import { UserContext } from '../../context/UserContext'
import { Link, ArrowRight } from 'lucide-react'
import React, { useContext } from 'react'
import { useState } from 'react'
import SignInPopUp from './SignInPopUp'
import { useMutation } from 'convex/react'
import { api } from '../../../convex/_generated/api'
import FlipCard from './_components/flipCard'
import ImageOverlap from './_components/ImageOverlap'
import { useRouter } from 'next/navigation'
import HighlightSection from './_components/contents'



import {
    Accordion,
    AccordionContent,
    AccordionItem,
    AccordionTrigger,
  } from '../../../components/ui/accordion.jsx'


function Hero() {
    const router =useRouter()
    const [prompt, setPrompt] = useState("")
    const examplePrompts = [
        { key: 1, prompt: 'Make a Course Selling Website' },
        { key: 2, prompt: 'Create a Todo App' },
        { key: 3, prompt: 'Make an E-Commerce Website' },
        { key: 4, prompt: 'Make a Weather App' },
        { key: 5, prompt: 'Create a Budget Track App' }
    ];

    const exampleQnA = [
        {key: 1, question: 'What does this app do?', answer: 'It does nothing as of now.'},
        {key: 2, question: 'What teck stacks does this app know?', answer: 'Only vanilla js, html, css.'},
        {key: 3, question: 'Who owns the project and code generated by this?', answer: 'You!!!'}
    ];
    const { messages, setMessages } = useContext(MessageContext);
    const { user, setUser } = useContext(UserContext);
    const CreateWorkspace = useMutation(api.workspace.CreateWorkspace)
    const [openDialog, setOpenDialog] = useState(false);

    const onGenerate = async (input) => {

        if (!user?.name) {
            setOpenDialog(true);
        }
      
        setMessages({
            role: 'user',
            content: input
        })
        const msg ={
            role: 'user',
            content: input
        }
        const workspaceId = await CreateWorkspace({
            messages:[msg],
            user:user?._id
        })
        console.log(workspaceId)
        router.push('./workspace/'+workspaceId)

    }
    return (
        <>
            
            <div className='flex flex-col justify-center items-center w-full gap-3 mt-20  '>
                <h1 className='text-4xl text-center font-bold font-montserrat'>Bringing your vision to life.</h1>
                <h2 className='font-montserrat'>Prompt run, deploy, edit and make websites</h2>

                <div className=' rounded-xl w-1/2 p-2 bg-gray-800'>
                    <div className='w-full flex'>

                        <textarea value={prompt} onChange={(e) => {
                            setPrompt(e.target.value)
                        }} className='bg-gray-800 outline-none w-full h-40 p-2 rounded-md' placeholder='What you want to build' type="text-area"
                        />
                        {prompt != "" && <ArrowRight className='bg-blue-500 p-2 w-10 h-8 cursor-pointer text-white' onClick={() => onGenerate(prompt)} />}

                    </div>
                    <div><Link className='w-7 h-5' /></div>
                </div>


                <div className='grid grid-cols-3 gap-3'>
                    {examplePrompts.map((Prompt) => (
                        <div key={Prompt.key} className='flex gap-1 border p-1 text-sm text-center justify-center items-center rounded-md cursor-pointer hover shadow-sm' onClick={() => onGenerate(Prompt.prompt)}>
                            {Prompt.prompt}
                        </div>

                    ))}
                </div>
                
               

                <SignInPopUp openDialog={openDialog} closeDialog={(v) => {
                    setOpenDialog(false)
                }} />

            </div>
       


<div className="flex flex-col items-center my-10">
  <h2 className="text-center text-2xl font-bold mb-2">Testimonials</h2> 
  <div className="flex justify-center flex-wrap gap-4">
    <FlipCard
      title="Custom Domains"
      description="A short sentence describing this callout is."
      imageUrl="https://s25.postimg.cc/frbd9towf/cta-2.png"
      backContent="More details about Custom Domains."
    />
    <FlipCard
      title="Never Sleeps"
      description="A short sentence describing this callout is."
      imageUrl="https://s25.postimg.cc/hj4c4qnov/cta-3.png"
      backContent="More details about Never Sleeps."
    />
    <FlipCard
      title="Dedicated"
      description="A short sentence describing this callout is."
      imageUrl="https://s25.postimg.cc/l2q9ujy4f/cta-4.png"
      backContent="More details about Dedicated."
    />
  </div>
</div>

    <div className='my-10 ml-20 mr-20'>
                    <h1 className='text-3xl font-bold'>Frequently Asked Questions</h1>
                    {exampleQnA.map((entry) => (
                        <Accordion key={entry.key} type="single" collapsible>
                        <AccordionItem value={`item-${entry.key}`}>
                            <AccordionTrigger className='text-base'>{entry.question}</AccordionTrigger>
                            <AccordionContent className='text-sm'>
                                {entry.answer}
                            </AccordionContent>
                        </AccordionItem>
                        </Accordion>
                    ))}
                </div>
            
                <HighlightSection/>
               
               
        </>
        
    )
}

export default Hero

